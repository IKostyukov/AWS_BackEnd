console: true
service: product-service
# app and org for use with dashboard.serverless.com
# app: product-service-task4-1
# plugins:
#   - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  dotenvVars: ${file(configs.js)}

# org: igorok

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x

  # you can overwrite defaults here
  stage: dev
  region: eu-west-1
  environment:
    SNS_URL:
      Ref: SNSTopic

    PG_HOST: ${self:custom.dotenvVars.PG_HOST, env:PG_HOST, ''}
    PG_USERNAME: ${self:custom.dotenvVars.PG_USERNAME, env:PG_USERNAME, ''}
    PG_DATABASE: ${self:custom.dotenvVars.PG_DATABASE, env:PG_DATABASE, ''}
    PG_PASSWORD: ${self:custom.dotenvVars.PG_PASSWORD, env:PG_PASSWORD, ''}
    PG_PORT: ${self:custom.dotenvVars.PG_PORT, env:PG_PORT, ''}

  iamRoleStatments:
    - Effect: "Alow"
      Actions: "sns:*"
      Recource:
        Ref:

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: product-service-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: igorkostukov@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic



functions:
  catalogBatchProcess:
    handler: handlersProduct/catalogBatch.catalogBatchProcess
    events: 
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

  getProductsList:
    handler: handlersProduct/getList.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true

  getProductsById:
    handler: handlersProduct/getById.getProductsById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
